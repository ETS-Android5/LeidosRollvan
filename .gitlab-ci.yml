image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "30"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "30.0.3"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7583922"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager  "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager  "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager  "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager  "ndk-bundle" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager  "cmake;${CMAKE}" >/dev/null
  
  - export ANDROID_HOME=$PWD/android-sdk-linux/
  - export CMAKE_HOME=$PWD/android-sdk-linux/cmake/${CMAKE}/bin/
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/:$CMAKE_HOME

  - chmod +x ./gradlew
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

# Basic android and gradle stuff
# Check linting
lintDebug:
  interruptible: true
  stage: build
  tags:
    - docker
  script:
    - cd Android_Project
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

# # Make Project
assembleDebug:
  interruptible: true
  stage: build
  tags:
    - docker
  script:
    - cd Android_Project
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - Android_Project/app/build/outputs/

# # Run all tests, if any fails, interrupt the pipeline(fail it)
debugTests:
  interruptible: true
  stage: test
  tags: 
    - docker
  script:
    - cd Android_Project
    - ./gradlew -Pci --console=plain :app:testDebug

EspressoTest:
  stage: test
  tags:
    - docker
  script:
    - echo y | android-sdk-linux/tools/bin/sdkmanager  "emulator" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"
    - echo y | android-sdk-linux/tools/bin/avdmanager create avd -f -n testAVD -k "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"
    - android-sdk-linux/emulator/emulator -avd testAVD -no-audio -no-window &
    - ./gradlew connectedAndroidTest
    
unitTest:
  stage: test
  tags:
    - docker
  script:
    - cd Android_Project
    - ./gradlew test
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml



