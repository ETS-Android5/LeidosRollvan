image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "30"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "30.0.3"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7583922"
  EMULATOR_VERSION: "24"

# Packages installation before running script
before_script:
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${SDK_TOOLS}_latest.zip
  - unzip -q android-sdk.zip -d android-sdk-linux
  - rm android-sdk.zip

  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/

  - android-sdk-linux/tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --update > update.log
  - echo y | android-sdk-linux/tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}" "extras;google;m2repository" "extras;android;m2repository" > installPlatform.log

  - chmod +x ./gradlew

# Basic android and gradle stuff
# Check linting
#lintDebug:
 # interruptible: true
  #stage: build
#  tags:
 #   - docker
  #script:
 #   - cd Android_Project
  #  - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

# Make Project
#assembleDebug:
 # interruptible: true
  #stage: build
#  tags:
 #   - docker
#  script:
 #   - cd Android_Project
  #  - ./gradlew assembleDebug
#  artifacts:
 #   paths:
  #    - Android_Project/app/build/outputs/

# Run all tests, if any fails, interrupt the pipeline(fail it)
#debugTests:
 # interruptible: true
  #stage: test
#  tags: 
 #   - docker
  #script:
   # - cd Android_Project
   # - ./gradlew -Pci --console=plain :app:testDebug


unitTest:
  stage: test
  tags:
    - docker
  script:
    - cd Android_Project
    - ./gradlew test
  artifacts:
    when: always
    reports:
      junit: Android_Project/app/build/test-results/**/TEST-*.xml


instrumentation_tests:
  stage: test
  tags:
    - docker
  script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes libx11-dev libpulse0 libgl1 libnss3 libxcomposite-dev libxcursor1 libasound2
    - wget --quiet --output-document=android-wait-for-emulator https://raw.githubusercontent.com/travis-ci/travis-cookbooks/0f497eb71291b52a703143c5cd63a217c8766dc9/community-cookbooks/android-sdk/files/default/android-wait-for-emulator
    - chmod +x android-wait-for-emulator
    - android-sdk-linux/tools/bin/sdkmanager --update > update.log
    - android-sdk-linux/tools/bin/sdkmanager "platform-tools" "emulator" "system-images;android-${EMULATOR_VERSION};default;armeabi-v7a"  > installEmulator.log
    - echo no | android-sdk-linux/tools/bin/avdmanager create avd -n test -k "system-images;android-${EMULATOR_VERSION};default;armeabi-v7a"
    - android-sdk-linux/emulator/emulator -avd test -no-window -no-audio &
    - ./android-wait-for-emulator
    - adb shell input keyevent 82
    - cd Android_Project
    - ./gradlew connectedCheck



